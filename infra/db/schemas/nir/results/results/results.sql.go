// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: results.sql

package results

import (
	"context"
)

const getResult = `-- name: GetResult :one
SELECT result_id, sample_name, spectro, company_id, operation_id, product_id, user_audit_id, observation, operator_id, user_id FROM nir.result
where result_id = $1
`

func (q *Queries) GetResult(ctx context.Context, resultID int64) (NirResult, error) {
	row := q.db.QueryRow(ctx, getResult, resultID)
	var i NirResult
	err := row.Scan(
		&i.ResultID,
		&i.SampleName,
		&i.Spectro,
		&i.CompanyID,
		&i.OperationID,
		&i.ProductID,
		&i.UserAuditID,
		&i.Observation,
		&i.OperatorID,
		&i.UserID,
	)
	return i, err
}

const getResults = `-- name: GetResults :many
SELECT result_id, sample_name, spectro, company_id, operation_id, product_id, user_audit_id, observation, operator_id, user_id FROM nir.result
LIMIT 100
`

func (q *Queries) GetResults(ctx context.Context) ([]NirResult, error) {
	rows, err := q.db.Query(ctx, getResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NirResult
	for rows.Next() {
		var i NirResult
		if err := rows.Scan(
			&i.ResultID,
			&i.SampleName,
			&i.Spectro,
			&i.CompanyID,
			&i.OperationID,
			&i.ProductID,
			&i.UserAuditID,
			&i.Observation,
			&i.OperatorID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
